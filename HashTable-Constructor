public class HashTable{
// The default size of the hash table
private int size = 7;
 
// The array of nodes that stores the key-value pairs
private Node[] dataMap;
 
// The inner Node class that represents a node in the linked list 
// of values stored at a particular index in the hash table
class Node {
    String key;
    int value;
    Node next;
 
    Node(String key, int value) {
        this.key = key;
        this.value = value;
    }
}
 
// The constructor that initializes the dataMap array to 
// an array of Node objects with the default size
public HashTable() {
    dataMap = new Node[size];
}

//print table
public void printTable() {
        for(int i = 0; i < dataMap.length; i++) {
            System.out.println(i + ":");
            Node temp = dataMap[i];
            while (temp != null) {
                System.out.println("   {" + temp.key + "= " + temp.value + "}");
                temp = temp.next;
            }
        }
    }


//hash giving random indices
    private int hash(String key) {
        int hash = 0;
        char[] keyChars = key.toCharArray();
        for (int i = 0; i < keyChars.length; i++) {
            int asciiValue = keyChars[i];
            hash = (hash + asciiValue * 23) % dataMap.length;
        }
        return hash;
    }

}
