public void insertionSort() {
    // If the list has less than 2 elements, it is already sorted
    if (length < 2) {
        return;
    }
 
    // Start with a sorted list containing only the first element
    Node sortedListHead = head;
 
    // Start with the second element in the unsorted list
    Node unsortedListHead = head.next;
 
    // Mark the end of the sorted list
    sortedListHead.next = null;
 
    // Iterate over the unsorted list
    while (unsortedListHead != null) {
 
        // Take the first element in the unsorted list
        Node current = unsortedListHead;
 
        // Move to the next element in the unsorted list
        unsortedListHead = unsortedListHead.next;
 
        // If the current element is smaller than the first element of the sorted list
        if (current.value < sortedListHead.value) {
            // Insert the current element at the beginning of the sorted list
            current.next = sortedListHead;
            // Update the sorted list head
            sortedListHead = current;
        } else {
            // Start at the beginning of the sorted list
            Node searchPointer = sortedListHead;
 
            // Search for the correct insertion point
            while (searchPointer.next != null && current.value > searchPointer.next.value) {
                // Move to the next element in the sorted list
                searchPointer = searchPointer.next;
            }
 
            // Insert the current element after searchPointer
            current.next = searchPointer.next;
            searchPointer.next = current;
        }
    }
 
    // Update the head of the sorted list
    head = sortedListHead;
 
    // Update the tail of the sorted list
    Node temp = head;
    while (temp.next != null) {
        temp = temp.next;
    }
    tail = temp;
}
